# importing unemployment rate and labor participation rate data
unemployment_2010 <- read.csv("tpt_provinsi_2010.csv")
head(unemployment_2010)
library(ggplot2)
# Initial configurations to clear the workspace and set to print numeric values
options(scipen = 9999)
rm(list=ls())
install.packages("ggplot2")
install.packages("class")
# Initial configurations to clear the workspace and set to print numeric values
options(scipen = 9999)
rm(list=ls())
# importing unemployment rate and labor participation rate data
unemployment_2010 <- read.csv("tpt_provinsi_2010.csv")
head(unemployment_2010)
library(ggplot2)
plot1 <- ggplot(data = unemployment_2010, aes(x = unemployment_2010$province, y = unemployment_2010$unemployment_rate)) + geom_bar(stat = "identity")
plot1
plot1 <- plot1 + theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust=1), plot.title = element_text(hjust = 0.5)) + xlab("Province") + ylab("Unemployment Rate") + ggtitle("Unemployment Rate Across All Provinces in Indonesia during 2010")
plot1
theme_algoritma <- theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust=1), plot.title = element_text(hjust = 0.5))
plot2 <- ggplot(data = unemployment_2010, aes(x = unemployment_2010$province, y = unemployment_2010$participation_rate)) + geom_bar(stat = "identity") + xlab("Province") + ylab("Labor Participation Rate") + ggtitle("Labor Force Participation Rate Across All Provinces in Indonesia during 2010") + theme_algoritma
plot2
bar_colors <- c("LABOR PARTICIPATION RATE"="RED", "UNEMPLOYMENT RATE" = "BLACK")
plot_final <- ggplot() +
# participation rate
geom_bar(data=unemployment_2010, aes(x = unemployment_2010$province, y = unemployment_2010$participation_rate, fill = "LABOR PARTICIPATION RATE"), stat = "identity") +
#unemployment rate
geom_bar(data=unemployment_2010, aes(x = unemployment_2010$province, y = unemployment_2010$unemployment_rate, fill = "UNEMPLOYMENT RATE"),stat = "identity") + scale_fill_manual(name="", values= bar_colors) +
xlab("Province") + ylab("Labor Participation Rate") + ggtitle("Unemployment Rate vs Labor Force Participation Rate \n Across All Provinces in Indonesia during 2010") + theme_algoritma
plot_final
line_colors <- c("MEAN PARTICIPATION RATE" = "BLACK", "MEAN UNEMPLOYMENT RATE" = "YELLOW")
plot_final <- plot_final +
# mean participation rate
geom_hline(aes(yintercept = mean(unemployment_2010$participation_rate), color = "MEAN PARTICIPATION RATE")) +
# mean unemployment rate
geom_hline(aes(yintercept = mean(unemployment_2010$unemployment_rate), color = "MEAN UNEMPLOYMENT RATE")) +
scale_color_manual(name = "", values = line_colors)
plot_final
plot_final <- plot_final + labs(
title = "Unemployment Rate vs Labor Participation Rate \n Across Indonesia, 2010",
subtitle = "Provinces with participation rates below the mean tend to have higher-than-average unemployment rates",
caption = "Source: Badan Pusat Statistik (BPS)",
x = "Province", y = "Rate"
)
plot_final
food <- read.csv("food.csv")
food$Ingredient <- as.character(food$Ingredient)
plot.food <- ggplot(food, aes(food$Sweetness, food$Crunchiness)) + geom_label(aes(label = food$Ingredient)) + labs(x = "how sweet the food tastes", y = "how crunchy the food is")
plot.food
papaya <- data.frame(Ingredient = "papaya", Sweetness = 10, Crunchiness = 3, Type = "fruit")
newfood <- rbind(food, papaya)
plot.newfood <- ggplot(newfood, aes(x = newfood$Sweetness, y = newfood$Crunchiness)) + geom_label(label = newfood$Ingredient) + geom_label(data = papaya, aes(x=papaya$Sweetness, y=papaya$Crunchiness), label=papaya$Ingredient, color = "red") + labs(x = "how sweet the food tastes", y = "how crunchy the food is")
plot.newfood
library(class)
library(gmodels)
install.packages("gmodels")
library(class)
library(gmodels)
train1 <- newfood[1:15,2:3]
test1 <- newfood[16,2:3]
trainlabels1 <- newfood[1:15,4]
knn(train = train1, test = test1, cl = trainlabels1, k=3)
train2 <- newfood[1:12,2:3]
test2 <- newfood[13:16,2:3]
trainlabels2 <- newfood[1:12,4]
testlabels2 <- newfood[13:16,4]
results2 <- knn(train = train2, test = test2, cl = trainlabels2, k=3)
CrossTable(x=testlabels2, y = results2)
library(caret)
install.packages("caret")
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
install.packages("lattice")
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
food <- read.csv("food.csv")
food$Ingredient <- as.character(food$Ingredient)
plot.food <- ggplot(food, aes(food$Sweetness, food$Crunchiness)) + geom_label(aes(label = food$Ingredient)) + labs(x = "how sweet the food tastes", y = "how crunchy the food is")
plot.food
papaya <- data.frame(Ingredient = "papaya", Sweetness = 10, Crunchiness = 3, Type = "fruit")
newfood <- rbind(food, papaya)
plot.newfood <- ggplot(newfood, aes(x = newfood$Sweetness, y = newfood$Crunchiness)) + geom_label(label = newfood$Ingredient) + geom_label(data = papaya, aes(x=papaya$Sweetness, y=papaya$Crunchiness), label=papaya$Ingredient, color = "red") + labs(x = "how sweet the food tastes", y = "how crunchy the food is")
plot.newfood
library(class)
library(gmodels)
train1 <- newfood[1:15,2:3]
test1 <- newfood[16,2:3]
trainlabels1 <- newfood[1:15,4]
knn(train = train1, test = test1, cl = trainlabels1, k=3)
train2 <- newfood[1:12,2:3]
test2 <- newfood[13:16,2:3]
trainlabels2 <- newfood[1:12,4]
testlabels2 <- newfood[13:16,4]
results2 <- knn(train = train2, test = test2, cl = trainlabels2, k=3)
CrossTable(x=testlabels2, y = results2)
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
install.packages("e1071")
library(caret)
model1 <- train(Type~., data = food, method = "knn", trControl = trainControl(method = "repeatedcv", number = 6, repeats = 5), tuneGrid = expand.grid(k=1:12))
plot(model1)
#Generate data
x <- 1:400
y <- sin(x / 10) * exp(x * -0.01)
plot(x,y)
library(ggplot2)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
x <- c("ggmap","rgal","rgeos","maptools","dplyr","tidyr","tmap")
lapply(x, library, character.only = TRUE)
lapply(x,install.packages, character.only = TRUE)
lapply(x,install.packages, character.only = FALSE)
install.packages("ggmap")
install.packages("rgdal")
y <- c("rgeos","maptools","dplyr")
lapply(y,install.packages)
lapply("tidyr","tmap",install.packages)
lapply(x,install.packages)
library("swirl")
swirl()
head(flags)
dim(flags)
play()
viewinfo()
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class((shape_mat))
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data("iris")
?iris
str(iris)
iris
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
apply(iris[ ,1:4],2 mean)
apply(iris[ ,1:4],2, mean)
apply(iris,1,mean)
apply(iris,2,mean)
data("mtcars")
?mtcars
mtcar
mtcars
str(mtcars)
lapply(mtcars,mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars,cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
str(tapply(mtcars$hp, mtcars$cyl, mean))
a <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(a[1]-a[3])
debug(ls)
debug(ls)
ls
ls()
debug(ls)
ls()
getwd()
path()
?paste0
C:\Users\user\Documents\Rcourse
setwd("C:/Users/user/Documents/Rcourse")
dir
dir()
source("MakeVectorAndMean.R")
a <- makeVector()
a
a <- makeVector(c(2,3,4,5,6,7,8,1,2,3,4,10))
a
a <- makeVector(x = 2,4,5,6,7,19,2)
a <- makeVector(x = c(2,3,4,5,6,7,8,1,2,3,4,10))
a
b <- cachemean(a)
b
a
a$getmean()
c <- makeVector(x = c(2,13,4,5,6,7,8,1,2,3,4,10))
a$getmean()
d <- cachemean(c)
a$getmean()
c$getmean()
a <- makeVector(x = c(2,3,4,5,6,7,8,1,2,3,4,100))
a$getmean()
cachemean(a)
a$getmean()
a$set()
a$setmean()
a$set(y = c(46,45,34))
a$getmean()
rm(list = "a","b","c","d")
makeVector(c(2,3,1,2,3,2,1,2,3,2,2,2,))
$get
get()
cachemean()
cachemean
makeVector
a
a <- makeVector(c(1,2,3,4,5))
a$getmean()
cachemean(a)
cachemean(a)
cachemean(a)
cachemean(a)
a$getmean()
cachemean(a)
a$get()
a$setmean()
a$setmean(mean = 3)
a$setmean(mean = 4)
a$setmean()
a$setmean(mean = 4)
a$getmean()
cachemean(a)
a$setmean(NULL)
cachemean(a)
cachemean(a)
getwd()
source("MatrixAndInverse.R")
q <- makeCacheMatrix(matrix(1:9),3,3)
q <- makeCacheMatrix(matrix(1:9))
q
cacheSolve(q)
source("MatrixAndInverse.R")
q <- makeCacheMatrix(matrix(1:9),3,3)
cacheSolve(q)
source("MatrixAndInverse.R")
q <- makeCacheMatrix(matrix(1:9),3,3)
cacheSolve(q)
rm(list = "a")
q <- makeCacheMatrix(matrix(1:9),3,3)
q <- makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(q)
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3),3,3))
cacheSolve(q)
matrix()
library(MASS)
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3,7),2,5))
cacheSolve(q)
source("MatrixAndInverse.R")
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3,7),2,5))
cacheSolve(q)
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3),3,3))
cacheSolve(q)
source("MatrixAndInverse.R")
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3),3,3))
cacheSolve(q)
q <- makeCacheMatrix(matrix(c(1,2,1,2,3,2,1,4,3,7),2,5))
cacheSolve(q)
library(qmap)
library(ggmap)
setwd("C:/Users/user/Documents/Rcourse/ProgrammingAssignment2")
dir()
